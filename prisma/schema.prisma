generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Attendee {
  id          Int        @id @default(autoincrement())
  displayName String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  feedbacks   Feedback[]
  sessions    Session[]  @relation("AttendeeToSession")
}

model Feedback {
  pace       Pace     @default(value: good)
  sessionId  Int
  attendeeId Int
  comment    String?   @default(value: "")
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([sessionId, attendeeId])
}

model Session {
  id                Int             @id @default(autoincrement())
  pin               String          @unique
  likes             Int             @default(0)
  userId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  name              String
  published         Boolean         @default(false)
  showRealtimePulse Boolean         @default(false)
  Feedback          Feedback[]
  reactions         ReactionCount[]
  host              User            @relation(fields: [userId], references: [id])
  participants      Attendee[]      @relation("AttendeeToSession")
}

model ReactionCount {
  reactionType String
  sessionId    Int
  count        Int     @default(0)
  session      Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([sessionId, reactionType])
}

model User {
  id           String       @id @unique
  displayName  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  authProvider AuthProvider
  email        String       @unique
  providerId   String
  avatarUrl    String?
  sessions     Session[]
}

enum AuthProvider {
  google
  github
}

enum Pace {
  fast
  slow
  good
}
